import request from "supertest";
import app from "../index";
import { generateRandomString } from "../utils/randomString";

describe("User Routes", () => {
  it("should get all users", async () => {
    const response = await request(app).get("/user");

    expect(response.status).toBe(200);
    expect(response.body.users).toBeInstanceOf(Array);
  });
  let id: string;
  describe("POST /user", () => {
    it("should create a new user", async () => {
      const newUser = {
        emailId: generateRandomString(10) + "@beura.com",
        password: "password",
        firstName: "Test",
        middleName: "User",
        lastName: "Example",
        isAdmin: false,
        phoneNumber: "1234567890",
      };
      const response = await request(app).post("/user").send(newUser);

      expect(response.status).toBe(201);
      expect(response.body).toMatchObject({
        emailId: newUser.emailId,
        firstName: newUser.firstName,
        middleName: newUser.middleName,
        lastName: newUser.lastName,
        isAdmin: newUser.isAdmin,
        phoneNumber: newUser.phoneNumber,
      });

      // The ID and createdAt fields are generated by the server, so we just check that they exist
      expect(response.body).toHaveProperty("id");
      expect(response.body).toHaveProperty("createdAt");
      id = response.body.id;
    });
  });

  describe("GET /user/:id ", () => {
    it("should get a user by ID", async () => {
      const response = await request(app).get("/user/" + id);

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty("id");
      expect(response.body).toHaveProperty("emailId");
      expect(response.body).toHaveProperty("id");
      expect(response.body).toHaveProperty("createdAt");
    });

    it("should return 404 when incorrect id is provided", async () => {
      const id = "incorrect-id";
      const response = await request(app).get("/user/" + id);
      expect(response.status).toBe(404);
      expect(response.body).toHaveProperty("msg", "User not found");
    });
  });

  it("should update a user", async () => {
    const newEmailId = generateRandomString(10) + "@beura.com";
    const response = await request(app)
      .put("/user/" + id)
      .send({
        firstName: "UpdatedFirstName",
        emailId: newEmailId,
      });

    expect(response.status).toBe(200);
    expect(response.body).toHaveProperty("id");
    expect(response.body.firstName).toBe("UpdatedFirstName");
    expect(response.body.emailId).toBe(newEmailId);
  });

  it("should delete a user", async () => {
    const response = await request(app).delete("/user/" + id);

    expect(response.status).toBe(200);
  });
});
