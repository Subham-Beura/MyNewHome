import request from "supertest";
import app from "./../index";
import { generateRandomString } from "../utils/randomString";

describe("User Routes", () => {
  it("should get all users", async () => {
    const response = await request(app).get("/user");

    expect(response.status).toBe(200);
    expect(response.body.users).toBeInstanceOf(Array);
  });
  describe("POST /user", () => {
    it("should create a new user", async () => {
      const newUser = {
        emailId: generateRandomString(10) + "@beura.com",
        password: "password",
        firstName: "Test",
        middleName: "User",
        lastName: "Example",
        isAdmin: false,
        phoneNumber: "1234567890",
      };
      console.log(newUser);
      const response = await request(app).post("/user").send(newUser);

      expect(response.status).toBe(201);
      expect(response.body).toMatchObject({
        emailId: newUser.emailId,
        firstName: newUser.firstName,
        middleName: newUser.middleName,
        lastName: newUser.lastName,
        isAdmin: newUser.isAdmin,
        phoneNumber: newUser.phoneNumber,
      });

      // The ID and createdAt fields are generated by the server, so we just check that they exist
      expect(response.body).toHaveProperty("id");
      expect(response.body).toHaveProperty("createdAt");
    });
  });

  describe("GET /user/:id ", () => {
    it("should get a user by ID", async () => {
      const id = "5100e689-1e0e-4650-a99f-dd8ee1feebb9";
      const response = await request(app).get("/user/" + id);

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty("id");
      expect(response.body).toHaveProperty("emailId");
      expect(response.body).toHaveProperty("id");
      expect(response.body).toHaveProperty("createdAt");
    });

    it("should return 404 when incorrect id is provided", async () => {
      const id = "incorrect-id";
      const response = await request(app).get("/user/" + id);
      expect(response.status).toBe(404);
      expect(response.body).toHaveProperty("msg", "User not found");
    });
  });

  it("should update a user", async () => {
    const response = await request(app).put("/user/1").send({
      name: "Updated Name",
      email: "updatedemail@example.com",
    });

    expect(response.status).toBe(200);
    expect(response.body).toHaveProperty("id");
    expect(response.body.name).toBe("Updated Name");
    expect(response.body.email).toBe("updatedemail@example.com");
  });

  it("should delete a user", async () => {
    const response = await request(app).delete("/user/1");

    expect(response.status).toBe(200);
    expect(response.body).toHaveProperty(
      "message",
      "User deleted successfully",
    );
  });
});
